// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes, avoid_escaping_inner_quotes, prefer_const_constructors, sort_constructors_first, always_specify_types

import 'dart:async';

import 'package:flutter/widgets.dart';

/// A class generated by flappy_translator package containing localized strings
class I18n {
  static String get appTitle => _getText("appTitle");

  static String get errorGetDataLabel => _getText("errorGetDataLabel");

  static String get errorGetSpeedLabel => _getText("errorGetSpeedLabel");

  static String get speedMaxLabel => _getText("speedMaxLabel");

  static String get cvLabel => _getText("cvLabel");

  static String get nameLabel => _getText("nameLabel");

  static late Map<String, String> _localizedValues;

  static const _enValues = {
    "appTitle": "BioSerenity Test",
    "errorGetDataLabel": "Impossible to data",
    "errorGetSpeedLabel": "Impossible to get speed",
    "speedMaxLabel": "Speed max",
    "cvLabel": "Power (CV)",
    "nameLabel": "Model",
  };

  static const _frValues = {
    "appTitle": "Test BioSerenity",
    "errorGetDataLabel": "Impossible de récupérer les données",
    "errorGetSpeedLabel": "Impossible de récupérer la vitesse",
    "speedMaxLabel": "Vitese maximum",
    "cvLabel": " Puissance (CV)",
    "nameLabel": "Modèle",
  };

  static const _allValues = {
    "en": _enValues,
    "fr": _frValues,
  };

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = {};
  }

  static late Locale _locale;

  static String _getText(String key) =>
      _localizedValues[key] ?? '** $key not found';

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()]!;
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('fr'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
